#!/bin/bash
# vim: ft=sh

set -e

# Mountpoint for top-level btrfs subvolume
BTRFS_MOUNT="/mnt/btrfs"


# OUTPUT

function out {
    # shellcheck disable=SC2059
    printf "$1\n" "${@:2}"
}

function debug {
    if [[ ${VERBOSE} == 1 ]]; then
        out "$@"
    fi
}

function info {
    if [[ ${TERSE} == 0 ]]; then
        out "$@"
    fi
}

function terse {
    if [[ ${TERSE} == 1 ]]; then
        out "$@"
    fi
}


# HELP

function usage_install {
    printf "%s install [-s] [-b INSTALLATION] [-f FILTER] IMAGE\n" "${0##*/}"
}

function usage_list {
    printf "%s list [-rsi]\n" "${0##*/}"
}

function usage_prune {
    printf "%s prune [-d] [-k KEEP]\n" "${0##*/}"
}

function usage_delete {
    printf "%s delete INSTALLATION\n" "${0##*/}"
}

function usage_stage {
    printf "%s stage [-f] INSTALLATION\n" "${0##*/}"
}

function usage_unstage {
    printf "%s unstage\n" "${0##*/}"
}

function usage_reboot {
    printf "%s reboot\n" "${0##*/}"
}

function usage_persist {
    printf "%s persist\n" "${0##*/}"
}

function usage_all {
    cat <<EOF
Usage:
${0##*/} [<global>] <command> [<args>]

Global Options:
    -h  Show this help message
    -v  Verbose. Increase output for debugging.
    -t  Terse. Reduces output with the intent of being easier machine-readable.
        -t and -v cannot be used together.

Usage of subcommands:

$(usage_install)
    Install IMAGE file under a new snapshot.
    -s  Directly stage that installation afterwards. Already staged
        installations are overwritten.
    -b  Specifies a different base subvolume which will be the basis for the
        snapshot instead of the currently running subvolume.
    -f  Filter file for rsync to use.
        Default: 'usr/share/svup/upgrade.filter' in the new image.
$(usage_list)
    List the names of all available installed subvolumes.
    -r  Print the running subvolume.
    -s  Print the staged subvolume. If nothing is staged, exit with code 9.
    -i  Print the instaged subvolume. This will will be booted after any
        regular reboot.
$(usage_prune)
    Prune oldest subvolumes with unused installations. The currently running,
    staged or installed subvolumes will be skipped and never deleted.
    -d  Dry run. Only print the names of subvolumes that would be deleted, but
        don't do anything.
    -k  How many subvolumes to keep. Staged and running sobvolumes are not
        counted, so specifying 0 would delete all "unused" subvolumes.
        Default: 2.
$(usage_delete)
    Delete the given subvolume. This is essentially a wrapper around 'btrfs
    subvolume delete' that ensures no running or installed subvolumes are
    deleted and unstages staged subvolumes.
$(usage_stage)
    Prepare a subvolume for booting with '${0##*/} reboot'.
    -f  Force. If any installation is already staged, allow overwriting it.
$(usage_unstage)
    Unstage the currently staged version again.
$(usage_reboot)
    Try booting into the staged version. Fails if nothing is currently staged.
$(usage_persist)
    Confirm that the new version works and make it persistent across regular
    reboots.

INSTALLATION can either be just the name of a subvolume, for example
'root5', or a full path pointing to the subvolume, for example
'${BTRFS_MOUNT}/root5'.
EOF
}


# UTILITY FUNCTIONS

function mount_btrfs_top {
    # Ensures btrfs top-level subvolume is mounted
    ROOT_DEV="$(findmnt -nv -o source /)"
    if ! findmnt "${BTRFS_MOUNT}" > /dev/null; then
        mkdir -p "${BTRFS_MOUNT}"
        mount -t btrfs "${ROOT_DEV}" "${BTRFS_MOUNT}"
    fi
}

function find_subvolume {
    # Accept both a subvolume name (i.e. 'root5') or a full path
    if [[ -d "$1" ]]; then
        echo "$1"
    elif [[ -d "${BTRFS_MOUNT}/$1" ]]; then
        echo "${BTRFS_MOUNT}/$1"
    else
        printf "Could not find subvolume %s\n" "$1" >&2
        exit 3
    fi
}

function subvol_status {
    # Load status of subvolumes into variables
    if [[ -f /boot/tryboot/cmdline.txt ]]; then
        STAGED_SV="$(_get_root_subvol /boot/tryboot/cmdline.txt)"
    fi
    RUNNING_SV="$(_get_root_subvol /proc/cmdline)"
    INSTALLED_SV="$(_get_root_subvol /boot/cmdline.txt)"
}

function _get_root_subvol {
    # Parse a kernel command line for the root subvolume name
    sed -E 's/.*rootflags=subvol=(\S+).*/\1/' "$1"
}


# MAIN FUNCTIONS

function install_img {
    local STAGE=0
    local BASE="/"
    local FILTER=""
    while getopts 'sb:f:' OPTION
    do
        case ${OPTION} in
            s) STAGE=1
                ;;
            b) BASE="${OPTARG}"
                ;;
            f) FILTER="${OPTARG}"
                ;;
            ?) printf "Usage:\n%s\n" "$(usage_install)" >&2
                exit 2
                ;;
        esac
    done
    shift $((OPTIND - 1))
    unset OPTIND

    if [[ $# != 1 ]]; then
        printf "Missing image path\n%s\n" "$(usage_install)" >&2
        exit 2
    fi
    export IMAGE_PATH="$1"
    export IMAGE_MOUNT="/mnt/svup-image"

    LOOP_DEV=$(losetup -f -P --show "${IMAGE_PATH}")

    # Unmount image when encountering any error
    trap 'echo "An error occured during installation, cleaning up"; _clean_install' EXIT

    mkdir -p "${IMAGE_MOUNT}"
    # Try to recover if something is already mounted. This could for example be
    # because a prvious run failed to clean up
    if mountpoint -q "${IMAGE_MOUNT}"; then
        debug "%s is already a mountpoint, unmounting..." "${IMAGE_MOUNT}"
        umount -R "${IMAGE_MOUNT}"
    fi
    mount -o ro,subvol=/root -t btrfs "${LOOP_DEV}p2" ${IMAGE_MOUNT}
    mount -o ro -t vfat "${LOOP_DEV}p1" "${IMAGE_MOUNT}/boot"

    mount_btrfs_top

    export SNAPSHOT_ROOT="${BTRFS_MOUNT}/root-temp"
    if [[ -e "${SNAPSHOT_ROOT}" ]]; then
        info "Partial installation from a previous aborted run found. Deleting..."
        btrfs subvolume delete "${SNAPSHOT_ROOT}"
    fi
    btrfs subvolume snapshot "$(find_subvolume "${BASE}")" "${SNAPSHOT_ROOT}"

    FILTER="${FILTER:-${SNAPSHOT_ROOT}/usr/share/svup/upgrade.filter}"

    local RSYNC_INFO="none"
    if [[ ${VERBOSE} == 1 ]]; then
        RSYNC_INFO="stats2,progress2,misc1"
    elif [[ ${TERSE} == 0 ]]; then
        RSYNC_INFO="stats1,progress0,misc0"
    fi

    debug "Applying upgrade image..."
    # Allow preemptively stopping the rsync process if this script receives
    # SIGTERM (or SIGINT, SIGHUP). While a regular process is running, all
    # signals are ignored. 'wait' on the other hand immediately exits and calls
    # the signal handler on SIGTERM.
    trap 'kill ${RSYNC_PID} &&  wait ${RSYNC_PID} || true' TERM INT HUP
    rsync --delete --inplace -aAXHx \
        -f ". ${FILTER}" \
        --info="${RSYNC_INFO}" \
        "${IMAGE_MOUNT}/" "${SNAPSHOT_ROOT}" &
    RSYNC_PID=$!
    wait ${RSYNC_PID}
    trap - TERM INT HUP

    debug "Copying over boot files..."
    # Put /boot into /boot-save
    rsync -a "${IMAGE_MOUNT}/boot/" "${SNAPSHOT_ROOT}/boot-save"

    # Modify /etc/fstab and /boot/cmdline.txt:
    # Set the correct subvolume and use the current PARTUUID
    local OLD_DISKID
    local NEW_DISKID
    OLD_DISKID=$(sed -nE 's|.*PARTUUID=([0-9a-f]+).*\s/\s.*|\1|p' "${SNAPSHOT_ROOT}/etc/fstab")
    NEW_DISKID=$(lsblk -no PTUUID "${ROOT_DEV}")

    # Find previous highest subvolume number and increment by 1
    local LAST_SV
    LAST_SV="$(find "${BTRFS_MOUNT}" -maxdepth 1 -regex ".*/root[0-9]*" -printf "%f\n" | sort -rV | head -n 1)"
    local N_LAST="${LAST_SV#root}"
    export SNAPSHOT_NAME="root$((N_LAST + 1))"

    sed -i "s|${OLD_DISKID}|${NEW_DISKID}|
            s|\(\s/\s.*subvol=\)[^, ]\+|\1${SNAPSHOT_NAME}|" \
        "${SNAPSHOT_ROOT}/etc/fstab"

    local CMDLINE="${SNAPSHOT_ROOT}/boot-save/cmdline.txt"
    debug "Previous commandline: %s" "$(cat "${CMDLINE}")"
    # Remove firstboot script as init
    sed -i "s|subvol=\S*|subvol=${SNAPSHOT_NAME}|
            s|${OLD_DISKID}|${NEW_DISKID}|
            s| init=\S*||
            s| quiet||" \
        "${CMDLINE}"
    debug "Changed commandline: %s" "$(cat "${CMDLINE}")"

    local RUN_FLAG=""
    [[ ${TERSE} == 0 ]] && RUN_FLAG="-v"
    run-parts ${RUN_FLAG} /etc/svup/install.d || true

    # Finalize by renaming from root-temp
    mv -T "${SNAPSHOT_ROOT}" "${BTRFS_MOUNT}/${SNAPSHOT_NAME}"
    info "Created new installation as subvolume %s\n" "${SNAPSHOT_NAME}"
    terse "subvolume %s" "${SNAPSHOT_NAME}"

    trap - EXIT
    _clean_install

    if [[ ${STAGE} == 1 ]]; then
        stage -f "${SNAPSHOT_NAME}"
    fi
}

function _clean_install {
    umount -R "${IMAGE_MOUNT}" || true
    losetup -d "${LOOP_DEV}" || true
}

function list_images {
    subvol_status
    while getopts 'rsi' OPTION
    do
        case ${OPTION} in
            r) echo "${RUNNING_SV}"
                exit 0
                ;;
            s) if [[ -z "${STAGED_SV}" ]]; then
                    echo "No subvolume staged currently" >&2
                    exit 9
                else
                    echo "${STAGED_SV}"
                fi
                exit 0
                ;;
            i) echo "${INSTALLED_SV}"
                exit 0
                ;;
            ?) printf "Usage:\n%s\n" "$(usage_list)" >&2
                exit 2
                ;;
        esac
    done

    mount_btrfs_top
    # Print full path with -t
    local format="%f\n"
    [[ "${TERSE}" == 1 ]] && format="%p\n"
    find "${BTRFS_MOUNT}" -maxdepth 1 -regex ".*/root[0-9]*" -printf "${format}" | sort -V
}

function prune_subvolumes {
    local N_KEEP=2
    local CMD=(btrfs subvolume delete --commit-after)
    while getopts 'dk:' OPTION
    do
        case ${OPTION} in
            d) CMD=(printf "%s\n")
                ;;
            k) N_KEEP="${OPTARG}"
                ;;
            ?) printf "Usage:\n%s\n" "$(usage_prune)" >&2
                exit 2
                ;;
        esac
    done

    subvol_status
    mount_btrfs_top
    find "${BTRFS_MOUNT}" -maxdepth 1 -regex ".*/root[0-9]*" \
            \! -path "*${STAGED_SV:-IGNORE}" \! -path "*${RUNNING_SV}" \
            \! -path "*${INSTALLED_SV}" -print0 | # Filter out staged, running and installed
        sort -zV |
        head -zn "-${N_KEEP}" |  # Remove N_KEEP newest
        xargs -0r "${CMD[@]}"    # Delete (or print with -d)
}

function delete {
    if [[ $# != 1 ]]; then
        printf "No subvolume to delete specified. Usage:\n%s\n" "$(usage_delete)" >&2
        exit 2
    fi

    subvol_status
    mount_btrfs_top
    local SUBVOL
    SUBVOL="$(find_subvolume "$1")"

    if [[ "${SUBVOL##*/}" == "${RUNNING_SV#/}" ||
          "${SUBVOL##*/}" == "${INSTALLED_SV#/}" ]]; then
        printf "%s is currently running or installed. Cannot delete.\n" "${SUBVOL}" >&2
        exit 12
    elif [[ "${SUBVOL##*/}" == "${STAGED_SV#/}" ]]; then
        info "Unstaging staged subvolume %s" "${SUBVOL}"
        unstage
    fi
    btrfs subvolume delete --commit-after "${SUBVOL}"
}

function stage {
    local FORCE=0
    while getopts 'f' OPTION
    do
        case ${OPTION} in
            f) FORCE=1
                ;;
            ?) printf "Usage:\n%s\n" "$(usage_stage)" >&2
                exit 2
                ;;
        esac
    done
    shift $((OPTIND - 1))
    unset OPTIND

    if [[ $# != 1 ]]; then
        printf "No subvolume to stage specified. Usage:\n%s\n" "$(usage_stage)" >&2
        exit 2
    fi

    mount_btrfs_top
    export STAGE_SUBVOL
    STAGE_SUBVOL="$(find_subvolume "$1")"

    # Check if something is already staged
    if [[ -f /boot/tryboot.txt ]]; then
        if [[ ${FORCE} == 1 ]]; then
            info "A subvolume is already staged, overwriting..."
            unstage
        else
            echo "A subvolume is already staged. Overwrite with -f" >&2
            exit 10
        fi
    fi

    rsync -a "${STAGE_SUBVOL}/boot-save/" /boot/tryboot
    cp /boot/tryboot/config.txt /boot/tryboot.txt
    echo -e "\nos_prefix=tryboot/" >> /boot/tryboot.txt

    local RUN_FLAG=""
    [[ ${TERSE} == 0 ]] && RUN_FLAG="-v"
    run-parts -v /etc/svup/stage.d || true
    info "Staged %s. Run the installation with '%s reboot'." "${STAGE_SUBVOL}" "${0##*/}"
    terse "staged %s" "${STAGE_SUBVOL}"
}

function unstage {
    rm -rf /boot/tryboot
    rm -f /boot/tryboot.txt
}

function boot_into {
    if [[ ! -f /boot/tryboot.txt ]]; then
        printf "No installation staged. Use '%s' first.\n" "$(usage_stage)" >&2
        exit 9
    fi
    info "Rebooting"
    exec reboot "0 tryboot"
}

function persist {
    local FORCE=0
    while getopts 'f' OPTION
    do
        case ${OPTION} in
            f) FORCE=1
                ;;
            ?) printf "Usage:\n%s\n" "$(usage_stage)" >&2
                exit 2
                ;;
        esac
    done
    shift $((OPTIND - 1))
    unset OPTIND

    subvol_status
    if [[ "${STAGED_SV#/}" != "${RUNNING_SV#/}" ]]; then
        if [[ "${FORCE}" == 1 ]]; then
            info "Persisting installation without testing in tryboot. Proceed with caution."
        else
            echo -n "Persisting without testing an installation in tryboot mode first could leave your device unbootable. " >&2
            echo "To proceed anyway, use the -f option." >&2
            exit 11
        fi
    fi

    # Save current installation
    mount_btrfs_top
    rsync "/boot/" "${BTRFS_MOUNT}/${INSTALLED_SV}/boot-save" \
        -a --exclude='/tryboot**' --inplace

    rsync -a /boot/tryboot/ /boot/ --delete-delay
    unstage
    info "Installation %s will now persist across regular reboots." "${STAGED_SV}"
    terse "persisted %s" "${STAGED_SV}"
}

TERSE=0
VERBOSE=0

while getopts 'htv' OPTION
do
    case ${OPTION} in
        h) usage_all
            exit 0
            ;;
        t) TERSE=1
            ;;
        v) VERBOSE=1
            ;;
        ?) printf "Usage:\n%s\n" "${0##*/} <command> [<args>] | -h" >&2
            exit 2
            ;;
    esac
done

shift $((OPTIND - 1))
unset OPTIND

if [[ $# -lt 1 ]]; then
    printf "ERROR: No command specified.\n\n%s\n" "$(usage_all)" >&2
    exit 2
fi

COMMAND=${1:-o}
shift

case ${COMMAND} in
    install) install_img "$@"
        ;;
    list) list_images "$@"
        ;;
    prune) prune_subvolumes "$@"
        ;;
    delete) delete "$@"
        ;;
    stage) stage "$@"
        ;;
    unstage) unstage "$@"
        ;;
    reboot) boot_into "$@"
        ;;
    persist) persist "$@"
        ;;
    *) printf "Command %s not recognized\n" "${COMMAND}" >&2
        exit 2
        ;;
esac
